// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// # Common Types

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// CSP features supported by a device or available for a contact (64 bit mask).
///
/// IMPORTANT: The flags determine what a device/contact is capable of, not
/// whether the settings allow for it. For example, group calls may be supported
/// but ignored if disabled in the settings.
public enum Common_CspFeatureMaskFlag: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// No features available
  case none // = 0

  /// Supports voice messages.
  case voiceMessageSupport // = 1

  /// Supports groups.
  case groupSupport // = 2

  /// Supports polls.
  case pollSupport // = 4

  /// Supports file messages.
  case fileMessageSupport // = 8

  /// Supports 1:1 audio calls.
  case o2OAudioCallSupport // = 16

  /// Supports 1:1 video calls.
  case o2OVideoCallSupport // = 32

  /// Supports forward security.
  case forwardSecuritySupport // = 64

  /// Supports group calls.
  case groupCallSupport // = 128

  /// Supports editing messages.
  case editMessageSupport // = 256

  /// Supports deleting messages.
  case deleteMessageSupport // = 512

  /// Supports (new-style) reactions.
  case reactionSupport // = 1024
  case UNRECOGNIZED(Int)

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .voiceMessageSupport
    case 2: self = .groupSupport
    case 4: self = .pollSupport
    case 8: self = .fileMessageSupport
    case 16: self = .o2OAudioCallSupport
    case 32: self = .o2OVideoCallSupport
    case 64: self = .forwardSecuritySupport
    case 128: self = .groupCallSupport
    case 256: self = .editMessageSupport
    case 512: self = .deleteMessageSupport
    case 1024: self = .reactionSupport
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .voiceMessageSupport: return 1
    case .groupSupport: return 2
    case .pollSupport: return 4
    case .fileMessageSupport: return 8
    case .o2OAudioCallSupport: return 16
    case .o2OVideoCallSupport: return 32
    case .forwardSecuritySupport: return 64
    case .groupCallSupport: return 128
    case .editMessageSupport: return 256
    case .deleteMessageSupport: return 512
    case .reactionSupport: return 1024
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Common_CspFeatureMaskFlag] = [
    .none,
    .voiceMessageSupport,
    .groupSupport,
    .pollSupport,
    .fileMessageSupport,
    .o2OAudioCallSupport,
    .o2OVideoCallSupport,
    .forwardSecuritySupport,
    .groupCallSupport,
    .editMessageSupport,
    .deleteMessageSupport,
    .reactionSupport,
  ]

}

/// E2E message type as defined by the Chat Server Protocol.
public enum Common_CspE2eMessageType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// Invalid message type
  case invalidType // = 0

  /// [`empty`](ref:e2e.empty)
  case empty // = 252

  /// [`text`](ref:e2e.text)
  case text // = 1

  /// [`deprecated-image`](ref:e2e.deprecated-image)
  case deprecatedImage // = 2

  /// [`location`](ref:e2e.location)
  case location // = 16

  /// [`deprecated-audio`](ref:e2e.deprecated-audio)
  case deprecatedAudio // = 20

  /// [`deprecated-video`](ref:e2e.deprecated-video)
  case deprecatedVideo // = 19

  /// [`file`](ref:e2e.file)
  case file // = 23

  /// [`poll-setup`](ref:e2e.poll-setup)
  case pollSetup // = 21

  /// [`poll-vote`](ref:e2e.poll-vote)
  case pollVote // = 22

  /// [`call-offer`](ref:e2e.call-offer)
  case callOffer // = 96

  /// [`call-answer`](ref:e2e.call-answer)
  case callAnswer // = 97

  /// [`call-ice-candidate`](ref:e2e.call-ice-candidate)
  case callIceCandidate // = 98

  /// [`call-hangup`](ref:e2e.call-hangup)
  case callHangup // = 99

  /// [`call-ringing`](ref:e2e.call-ringing)
  case callRinging // = 100

  /// [`delivery-receipt`](ref:e2e.delivery-receipt)
  case deliveryReceipt // = 128

  /// [`typing-indicator`](ref:e2e.typing-indicator)
  case typingIndicator // = 144

  /// `csp-e2e.Reaction`
  case reaction // = 130

  /// `csp-e2e.EditMessage`
  case editMessage // = 145

  /// `csp-e2e.DeleteMessage`
  case deleteMessage // = 146

  /// [`set-profile-picture`](ref:e2e.set-profile-picture) of a contact
  case contactSetProfilePicture // = 24

  /// [`delete-profile-picture`](ref:e2e.delete-profile-picture) of a contact
  case contactDeleteProfilePicture // = 25

  /// [`contact-request-profile-picture`](ref:e2e.contact-request-profile-picture)
  case contactRequestProfilePicture // = 26

  /// `csp-e2e.GroupJoinRequest`
  case groupJoinRequest // = 77

  /// `csp-e2e.GroupJoinResponse`
  case groupJoinResponse // = 78

  /// [`group-setup`](ref:e2e.group-setup) wrapped by
  /// [`group-creator-container`](ref:e2e.group-creator-container)
  case groupSetup // = 74

  /// [`group-name`](ref:e2e.group-name) wrapped by
  /// [`group-creator-container`](ref:e2e.group-creator-container)
  case groupName // = 75

  /// [`group-leave`](ref:e2e.group-leave) wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupLeave // = 76

  /// [`set-profile-picture`](ref:e2e.set-profile-picture) wrapped by
  /// [`group-creator-container`](ref:e2e.group-creator-container)
  case groupSetProfilePicture // = 80

  /// [`delete-profile-picture`](ref:e2e.delete-profile-picture) wrapped by
  /// [`group-creator-container`](ref:e2e.group-creator-container)
  case groupDeleteProfilePicture // = 84

  /// [`group-sync-request`](ref:e2e.group-sync-request) wrapped by
  /// [`group-creator-container`](ref:e2e.group-creator-container)
  case groupSyncRequest // = 81

  /// `csp-e2e.GroupCallStart` wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupCallStart // = 79

  /// `0x41`: [`text`](ref:e2e.text) wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupText // = 65

  /// [`location`](ref:e2e.location) wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupLocation // = 66

  /// [`deprecated-group-image`](ref:e2e.deprecated-group-image) wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupImage // = 67

  /// [`deprecated-audio`](ref:e2e.deprecated-audio) wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupAudio // = 69

  /// [`deprecated-video`](ref:e2e.deprecated-video) wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupVideo // = 68

  /// [`file`](ref:e2e.file) wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupFile // = 70

  /// [`poll-setup`](ref:e2e.poll-setup) wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupPollSetup // = 82

  /// [`poll-vote`](ref:e2e.poll-vote) wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupPollVote // = 83

  /// [`delivery-receipt`](ref:e2e.delivery-receipt) wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupDeliveryReceipt // = 129

  /// `csp-e2e.EditMessage` wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupEditMessage // = 147

  /// `csp-e2e.DeleteMessage` wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupDeleteMessage // = 148

  /// `csp-e2e.Reaction` wrapped by
  /// [`group-member-container`](ref:e2e.group-member-container)
  case groupReaction // = 131

  /// `csp-e2e-fs.Envelope`
  case forwardSecurityEnvelope // = 160

  /// [`web-session-resume`](ref:e2e.web-session-resume)
  case webSessionResume // = 254
  case UNRECOGNIZED(Int)

  public init() {
    self = .invalidType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalidType
    case 1: self = .text
    case 2: self = .deprecatedImage
    case 16: self = .location
    case 19: self = .deprecatedVideo
    case 20: self = .deprecatedAudio
    case 21: self = .pollSetup
    case 22: self = .pollVote
    case 23: self = .file
    case 24: self = .contactSetProfilePicture
    case 25: self = .contactDeleteProfilePicture
    case 26: self = .contactRequestProfilePicture
    case 65: self = .groupText
    case 66: self = .groupLocation
    case 67: self = .groupImage
    case 68: self = .groupVideo
    case 69: self = .groupAudio
    case 70: self = .groupFile
    case 74: self = .groupSetup
    case 75: self = .groupName
    case 76: self = .groupLeave
    case 77: self = .groupJoinRequest
    case 78: self = .groupJoinResponse
    case 79: self = .groupCallStart
    case 80: self = .groupSetProfilePicture
    case 81: self = .groupSyncRequest
    case 82: self = .groupPollSetup
    case 83: self = .groupPollVote
    case 84: self = .groupDeleteProfilePicture
    case 96: self = .callOffer
    case 97: self = .callAnswer
    case 98: self = .callIceCandidate
    case 99: self = .callHangup
    case 100: self = .callRinging
    case 128: self = .deliveryReceipt
    case 129: self = .groupDeliveryReceipt
    case 130: self = .reaction
    case 131: self = .groupReaction
    case 144: self = .typingIndicator
    case 145: self = .editMessage
    case 146: self = .deleteMessage
    case 147: self = .groupEditMessage
    case 148: self = .groupDeleteMessage
    case 160: self = .forwardSecurityEnvelope
    case 252: self = .empty
    case 254: self = .webSessionResume
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .invalidType: return 0
    case .text: return 1
    case .deprecatedImage: return 2
    case .location: return 16
    case .deprecatedVideo: return 19
    case .deprecatedAudio: return 20
    case .pollSetup: return 21
    case .pollVote: return 22
    case .file: return 23
    case .contactSetProfilePicture: return 24
    case .contactDeleteProfilePicture: return 25
    case .contactRequestProfilePicture: return 26
    case .groupText: return 65
    case .groupLocation: return 66
    case .groupImage: return 67
    case .groupVideo: return 68
    case .groupAudio: return 69
    case .groupFile: return 70
    case .groupSetup: return 74
    case .groupName: return 75
    case .groupLeave: return 76
    case .groupJoinRequest: return 77
    case .groupJoinResponse: return 78
    case .groupCallStart: return 79
    case .groupSetProfilePicture: return 80
    case .groupSyncRequest: return 81
    case .groupPollSetup: return 82
    case .groupPollVote: return 83
    case .groupDeleteProfilePicture: return 84
    case .callOffer: return 96
    case .callAnswer: return 97
    case .callIceCandidate: return 98
    case .callHangup: return 99
    case .callRinging: return 100
    case .deliveryReceipt: return 128
    case .groupDeliveryReceipt: return 129
    case .reaction: return 130
    case .groupReaction: return 131
    case .typingIndicator: return 144
    case .editMessage: return 145
    case .deleteMessage: return 146
    case .groupEditMessage: return 147
    case .groupDeleteMessage: return 148
    case .forwardSecurityEnvelope: return 160
    case .empty: return 252
    case .webSessionResume: return 254
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Common_CspE2eMessageType] = [
    .invalidType,
    .empty,
    .text,
    .deprecatedImage,
    .location,
    .deprecatedAudio,
    .deprecatedVideo,
    .file,
    .pollSetup,
    .pollVote,
    .callOffer,
    .callAnswer,
    .callIceCandidate,
    .callHangup,
    .callRinging,
    .deliveryReceipt,
    .typingIndicator,
    .reaction,
    .editMessage,
    .deleteMessage,
    .contactSetProfilePicture,
    .contactDeleteProfilePicture,
    .contactRequestProfilePicture,
    .groupJoinRequest,
    .groupJoinResponse,
    .groupSetup,
    .groupName,
    .groupLeave,
    .groupSetProfilePicture,
    .groupDeleteProfilePicture,
    .groupSyncRequest,
    .groupCallStart,
    .groupText,
    .groupLocation,
    .groupImage,
    .groupAudio,
    .groupVideo,
    .groupFile,
    .groupPollSetup,
    .groupPollVote,
    .groupDeliveryReceipt,
    .groupEditMessage,
    .groupDeleteMessage,
    .groupReaction,
    .forwardSecurityEnvelope,
    .webSessionResume,
  ]

}

/// A unit that may be used in a `oneof` option without any values.
/// Note: We're using this to simulate tagged unions.
public struct Common_Unit: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Threema Blob to be uploaded/downloaded from the Blob server.
public struct Common_Blob: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Blob ID as given by the Blob server
  public var id: Data = Data()

  /// Nonce used for encrypting/decrypting the Blob.
  /// Note: May be omitted if unambigously defined by the context.
  public var nonce: Data = Data()

  /// Secret (or public) key used for encrypting/decrypting the Blob.
  /// Note: May be omitted if unambigously defined by the context.
  public var key: Data = Data()

  /// Unix-ish timestamp in milliseconds when the blob has been uploaded
  public var uploadedAt: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Inline Blob data.
public struct Common_BlobData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Associated Blob ID
  public var id: Data = Data()

  /// The Blob's data
  public var data: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Generic image.
public struct Common_Image: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Common_Image.TypeEnum = .jpeg

  /// The image's associated blob.
  public var blob: Common_Blob {
    get {return _blob ?? Common_Blob()}
    set {_blob = newValue}
  }
  /// Returns true if `blob` has been explicitly set.
  public var hasBlob: Bool {return self._blob != nil}
  /// Clears the value of `blob`. Subsequent reads from it will return its default value.
  public mutating func clearBlob() {self._blob = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Format type of the image
  public enum TypeEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int
    case jpeg // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .jpeg
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .jpeg
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .jpeg: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Common_Image.TypeEnum] = [
      .jpeg,
    ]

  }

  public init() {}

  fileprivate var _blob: Common_Blob? = nil
}

/// Unique group identity.
public struct Common_GroupIdentity: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Group id as chosen by the group's creator
  public var groupID: UInt64 = 0

  /// Threema ID of the group's creator
  public var creatorIdentity: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Generic image allowing delta updates
///
/// Note: Lack of presence generally means that the image should remain
///       unchanged.
public struct Common_DeltaImage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var image: Common_DeltaImage.OneOf_Image? = nil

  /// The image is empty or was explicitly removed
  public var removed: Common_Unit {
    get {
      if case .removed(let v)? = image {return v}
      return Common_Unit()
    }
    set {image = .removed(newValue)}
  }

  /// The new updated image
  public var updated: Common_Image {
    get {
      if case .updated(let v)? = image {return v}
      return Common_Image()
    }
    set {image = .updated(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Image: Equatable, Sendable {
    /// The image is empty or was explicitly removed
    case removed(Common_Unit)
    /// The new updated image
    case updated(Common_Image)

  }

  public init() {}
}

/// Timespan (year 1970+) with milliseconds accuracy.
///
/// Note: This message is invalid if `to` is smaller than `from`.
public struct Common_Timespan: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Start of the timespan (Unix-ish timestamp in milliseconds, inclusive)
  public var from: UInt64 = 0

  /// End of the timespan (Unix-ish timestamp in miliseconds, inclusive)
  public var to: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Container for a list of identities.
public struct Common_Identities: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of identities
  public var identities: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Generic 2D resolution
public struct Common_Resolution: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var width: UInt32 = 0

  public var height: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "common"

extension Common_CspFeatureMaskFlag: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "VOICE_MESSAGE_SUPPORT"),
    2: .same(proto: "GROUP_SUPPORT"),
    4: .same(proto: "POLL_SUPPORT"),
    8: .same(proto: "FILE_MESSAGE_SUPPORT"),
    16: .same(proto: "O2O_AUDIO_CALL_SUPPORT"),
    32: .same(proto: "O2O_VIDEO_CALL_SUPPORT"),
    64: .same(proto: "FORWARD_SECURITY_SUPPORT"),
    128: .same(proto: "GROUP_CALL_SUPPORT"),
    256: .same(proto: "EDIT_MESSAGE_SUPPORT"),
    512: .same(proto: "DELETE_MESSAGE_SUPPORT"),
    1024: .same(proto: "REACTION_SUPPORT"),
  ]
}

extension Common_CspE2eMessageType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "_INVALID_TYPE"),
    1: .same(proto: "TEXT"),
    2: .same(proto: "DEPRECATED_IMAGE"),
    16: .same(proto: "LOCATION"),
    19: .same(proto: "DEPRECATED_VIDEO"),
    20: .same(proto: "DEPRECATED_AUDIO"),
    21: .same(proto: "POLL_SETUP"),
    22: .same(proto: "POLL_VOTE"),
    23: .same(proto: "FILE"),
    24: .same(proto: "CONTACT_SET_PROFILE_PICTURE"),
    25: .same(proto: "CONTACT_DELETE_PROFILE_PICTURE"),
    26: .same(proto: "CONTACT_REQUEST_PROFILE_PICTURE"),
    65: .same(proto: "GROUP_TEXT"),
    66: .same(proto: "GROUP_LOCATION"),
    67: .same(proto: "GROUP_IMAGE"),
    68: .same(proto: "GROUP_VIDEO"),
    69: .same(proto: "GROUP_AUDIO"),
    70: .same(proto: "GROUP_FILE"),
    74: .same(proto: "GROUP_SETUP"),
    75: .same(proto: "GROUP_NAME"),
    76: .same(proto: "GROUP_LEAVE"),
    77: .same(proto: "GROUP_JOIN_REQUEST"),
    78: .same(proto: "GROUP_JOIN_RESPONSE"),
    79: .same(proto: "GROUP_CALL_START"),
    80: .same(proto: "GROUP_SET_PROFILE_PICTURE"),
    81: .same(proto: "GROUP_SYNC_REQUEST"),
    82: .same(proto: "GROUP_POLL_SETUP"),
    83: .same(proto: "GROUP_POLL_VOTE"),
    84: .same(proto: "GROUP_DELETE_PROFILE_PICTURE"),
    96: .same(proto: "CALL_OFFER"),
    97: .same(proto: "CALL_ANSWER"),
    98: .same(proto: "CALL_ICE_CANDIDATE"),
    99: .same(proto: "CALL_HANGUP"),
    100: .same(proto: "CALL_RINGING"),
    128: .same(proto: "DELIVERY_RECEIPT"),
    129: .same(proto: "GROUP_DELIVERY_RECEIPT"),
    130: .same(proto: "REACTION"),
    131: .same(proto: "GROUP_REACTION"),
    144: .same(proto: "TYPING_INDICATOR"),
    145: .same(proto: "EDIT_MESSAGE"),
    146: .same(proto: "DELETE_MESSAGE"),
    147: .same(proto: "GROUP_EDIT_MESSAGE"),
    148: .same(proto: "GROUP_DELETE_MESSAGE"),
    160: .same(proto: "FORWARD_SECURITY_ENVELOPE"),
    252: .same(proto: "EMPTY"),
    254: .same(proto: "WEB_SESSION_RESUME"),
  ]
}

extension Common_Unit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Unit"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_Unit, rhs: Common_Unit) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_Blob: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Blob"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "nonce"),
    3: .same(proto: "key"),
    4: .standard(proto: "uploaded_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.nonce) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.key) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.uploadedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.nonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.nonce, fieldNumber: 2)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 3)
    }
    if self.uploadedAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.uploadedAt, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_Blob, rhs: Common_Blob) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.key != rhs.key {return false}
    if lhs.uploadedAt != rhs.uploadedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_BlobData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BlobData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_BlobData, rhs: Common_BlobData) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_Image: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Image"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "blob"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._blob) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .jpeg {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try { if let v = self._blob {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_Image, rhs: Common_Image) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._blob != rhs._blob {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_Image.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JPEG"),
  ]
}

extension Common_GroupIdentity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupIdentity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "creator_identity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed64Field(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.creatorIdentity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularFixed64Field(value: self.groupID, fieldNumber: 1)
    }
    if !self.creatorIdentity.isEmpty {
      try visitor.visitSingularStringField(value: self.creatorIdentity, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_GroupIdentity, rhs: Common_GroupIdentity) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.creatorIdentity != rhs.creatorIdentity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_DeltaImage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeltaImage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "removed"),
    2: .same(proto: "updated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Common_Unit?
        var hadOneofValue = false
        if let current = self.image {
          hadOneofValue = true
          if case .removed(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.image = .removed(v)
        }
      }()
      case 2: try {
        var v: Common_Image?
        var hadOneofValue = false
        if let current = self.image {
          hadOneofValue = true
          if case .updated(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.image = .updated(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.image {
    case .removed?: try {
      guard case .removed(let v)? = self.image else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .updated?: try {
      guard case .updated(let v)? = self.image else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_DeltaImage, rhs: Common_DeltaImage) -> Bool {
    if lhs.image != rhs.image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_Timespan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Timespan"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.from) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.to) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.from != 0 {
      try visitor.visitSingularUInt64Field(value: self.from, fieldNumber: 1)
    }
    if self.to != 0 {
      try visitor.visitSingularUInt64Field(value: self.to, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_Timespan, rhs: Common_Timespan) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_Identities: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Identities"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identities"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.identities) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identities.isEmpty {
      try visitor.visitRepeatedStringField(value: self.identities, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_Identities, rhs: Common_Identities) -> Bool {
    if lhs.identities != rhs.identities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_Resolution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Resolution"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.width) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.height) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.width != 0 {
      try visitor.visitSingularUInt32Field(value: self.width, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt32Field(value: self.height, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Common_Resolution, rhs: Common_Resolution) -> Bool {
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
